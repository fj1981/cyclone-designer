/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class GestureConfig : TBase
{
  private GestureEventType _eventType;
  private int _locationX;
  private int _locationY;

  /// <summary>
  /// 
  /// <seealso cref="GestureEventType"/>
  /// </summary>
  public GestureEventType EventType
  {
    get
    {
      return _eventType;
    }
    set
    {
      __isset.eventType = true;
      this._eventType = value;
    }
  }

  public int LocationX
  {
    get
    {
      return _locationX;
    }
    set
    {
      __isset.locationX = true;
      this._locationX = value;
    }
  }

  public int LocationY
  {
    get
    {
      return _locationY;
    }
    set
    {
      __isset.locationY = true;
      this._locationY = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool eventType;
    public bool locationX;
    public bool locationY;
  }

  public GestureConfig() {
    this._eventType = GestureEventType.NONE;
    this.__isset.eventType = true;
    this._locationX = 0;
    this.__isset.locationX = true;
    this._locationY = 0;
    this.__isset.locationY = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              EventType = (GestureEventType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              LocationX = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              LocationY = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("GestureConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.eventType) {
        field.Name = "eventType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)EventType);
        oprot.WriteFieldEnd();
      }
      if (__isset.locationX) {
        field.Name = "locationX";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LocationX);
        oprot.WriteFieldEnd();
      }
      if (__isset.locationY) {
        field.Name = "locationY";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LocationY);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("GestureConfig(");
    bool __first = true;
    if (__isset.eventType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EventType: ");
      __sb.Append(EventType);
    }
    if (__isset.locationX) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LocationX: ");
      __sb.Append(LocationX);
    }
    if (__isset.locationY) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LocationY: ");
      __sb.Append(LocationY);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

