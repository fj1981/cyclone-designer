/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Rect : TBase
{
  private int _top;
  private int _left;
  private int _bottom;
  private int _right;

  public int Top
  {
    get
    {
      return _top;
    }
    set
    {
      __isset.top = true;
      this._top = value;
    }
  }

  public int Left
  {
    get
    {
      return _left;
    }
    set
    {
      __isset.left = true;
      this._left = value;
    }
  }

  public int Bottom
  {
    get
    {
      return _bottom;
    }
    set
    {
      __isset.bottom = true;
      this._bottom = value;
    }
  }

  public int Right
  {
    get
    {
      return _right;
    }
    set
    {
      __isset.right = true;
      this._right = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool top;
    public bool left;
    public bool bottom;
    public bool right;
  }

  public Rect() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Top = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Left = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Bottom = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Right = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Rect");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.top) {
        field.Name = "top";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Top);
        oprot.WriteFieldEnd();
      }
      if (__isset.left) {
        field.Name = "left";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Left);
        oprot.WriteFieldEnd();
      }
      if (__isset.bottom) {
        field.Name = "bottom";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Bottom);
        oprot.WriteFieldEnd();
      }
      if (__isset.right) {
        field.Name = "right";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Right);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Rect(");
    bool __first = true;
    if (__isset.top) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Top: ");
      __sb.Append(Top);
    }
    if (__isset.left) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Left: ");
      __sb.Append(Left);
    }
    if (__isset.bottom) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Bottom: ");
      __sb.Append(Bottom);
    }
    if (__isset.right) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Right: ");
      __sb.Append(Right);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

