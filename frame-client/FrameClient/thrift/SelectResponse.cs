/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SelectResponse : TBase
{
  private List<NodeInfo> _nodeInfo;
  private NodeResultType _result;

  public List<NodeInfo> NodeInfo
  {
    get
    {
      return _nodeInfo;
    }
    set
    {
      __isset.nodeInfo = true;
      this._nodeInfo = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="NodeResultType"/>
  /// </summary>
  public NodeResultType Result
  {
    get
    {
      return _result;
    }
    set
    {
      __isset.result = true;
      this._result = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool nodeInfo;
    public bool result;
  }

  public SelectResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                NodeInfo = new List<NodeInfo>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  NodeInfo _elem14;
                  _elem14 = new NodeInfo();
                  _elem14.Read(iprot);
                  NodeInfo.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Result = (NodeResultType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SelectResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (NodeInfo != null && __isset.nodeInfo) {
        field.Name = "nodeInfo";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NodeInfo.Count));
          foreach (NodeInfo _iter15 in NodeInfo)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SelectResponse(");
    bool __first = true;
    if (NodeInfo != null && __isset.nodeInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NodeInfo: ");
      __sb.Append(NodeInfo);
    }
    if (__isset.result) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Result: ");
      __sb.Append(Result);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

