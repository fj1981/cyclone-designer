/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class NodeInfo : TBase
{
  private string _text;
  private string _id;
  private bool _textDisable;
  private bool _idDisable;
  private string _className;
  private string _descriptor;
  private int _childCount;
  private long _nodeSourceId;
  private NodeInfo _parent;
  private List<NodeInfo> _childList;
  private Rect _rect;
  private int _depth;
  private int _depthToContent;
  private int _contentIndex;

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public bool TextDisable
  {
    get
    {
      return _textDisable;
    }
    set
    {
      __isset.textDisable = true;
      this._textDisable = value;
    }
  }

  public bool IdDisable
  {
    get
    {
      return _idDisable;
    }
    set
    {
      __isset.idDisable = true;
      this._idDisable = value;
    }
  }

  public string ClassName
  {
    get
    {
      return _className;
    }
    set
    {
      __isset.className = true;
      this._className = value;
    }
  }

  public string Descriptor
  {
    get
    {
      return _descriptor;
    }
    set
    {
      __isset.descriptor = true;
      this._descriptor = value;
    }
  }

  public int ChildCount
  {
    get
    {
      return _childCount;
    }
    set
    {
      __isset.childCount = true;
      this._childCount = value;
    }
  }

  public long NodeSourceId
  {
    get
    {
      return _nodeSourceId;
    }
    set
    {
      __isset.nodeSourceId = true;
      this._nodeSourceId = value;
    }
  }

  public NodeInfo Parent
  {
    get
    {
      return _parent;
    }
    set
    {
      __isset.parent = true;
      this._parent = value;
    }
  }

  public List<NodeInfo> ChildList
  {
    get
    {
      return _childList;
    }
    set
    {
      __isset.childList = true;
      this._childList = value;
    }
  }

  public Rect Rect
  {
    get
    {
      return _rect;
    }
    set
    {
      __isset.rect = true;
      this._rect = value;
    }
  }

  /// <summary>
  /// 距离root节点的depth
  /// </summary>
  public int Depth
  {
    get
    {
      return _depth;
    }
    set
    {
      __isset.depth = true;
      this._depth = value;
    }
  }

  /// <summary>
  /// 具体id为content或者root的节点的depth
  /// </summary>
  public int DepthToContent
  {
    get
    {
      return _depthToContent;
    }
    set
    {
      __isset.depthToContent = true;
      this._depthToContent = value;
    }
  }

  public int ContentIndex
  {
    get
    {
      return _contentIndex;
    }
    set
    {
      __isset.contentIndex = true;
      this._contentIndex = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool text;
    public bool id;
    public bool textDisable;
    public bool idDisable;
    public bool className;
    public bool descriptor;
    public bool childCount;
    public bool nodeSourceId;
    public bool parent;
    public bool childList;
    public bool rect;
    public bool depth;
    public bool depthToContent;
    public bool contentIndex;
  }

  public NodeInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              TextDisable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IdDisable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ClassName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Descriptor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ChildCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              NodeSourceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Parent = new NodeInfo();
              Parent.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                ChildList = new List<NodeInfo>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  NodeInfo _elem10;
                  _elem10 = new NodeInfo();
                  _elem10.Read(iprot);
                  ChildList.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Rect = new Rect();
              Rect.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Depth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              DepthToContent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              ContentIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("NodeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.textDisable) {
        field.Name = "textDisable";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(TextDisable);
        oprot.WriteFieldEnd();
      }
      if (__isset.idDisable) {
        field.Name = "idDisable";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IdDisable);
        oprot.WriteFieldEnd();
      }
      if (ClassName != null && __isset.className) {
        field.Name = "className";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClassName);
        oprot.WriteFieldEnd();
      }
      if (Descriptor != null && __isset.descriptor) {
        field.Name = "descriptor";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Descriptor);
        oprot.WriteFieldEnd();
      }
      if (__isset.childCount) {
        field.Name = "childCount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ChildCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.nodeSourceId) {
        field.Name = "nodeSourceId";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NodeSourceId);
        oprot.WriteFieldEnd();
      }
      if (Parent != null && __isset.parent) {
        field.Name = "parent";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        Parent.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ChildList != null && __isset.childList) {
        field.Name = "childList";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ChildList.Count));
          foreach (NodeInfo _iter11 in ChildList)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Rect != null && __isset.rect) {
        field.Name = "rect";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Rect.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.depth) {
        field.Name = "depth";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Depth);
        oprot.WriteFieldEnd();
      }
      if (__isset.depthToContent) {
        field.Name = "depthToContent";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DepthToContent);
        oprot.WriteFieldEnd();
      }
      if (__isset.contentIndex) {
        field.Name = "contentIndex";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ContentIndex);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("NodeInfo(");
    bool __first = true;
    if (Text != null && __isset.text) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Text: ");
      __sb.Append(Text);
    }
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.textDisable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TextDisable: ");
      __sb.Append(TextDisable);
    }
    if (__isset.idDisable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IdDisable: ");
      __sb.Append(IdDisable);
    }
    if (ClassName != null && __isset.className) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClassName: ");
      __sb.Append(ClassName);
    }
    if (Descriptor != null && __isset.descriptor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Descriptor: ");
      __sb.Append(Descriptor);
    }
    if (__isset.childCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChildCount: ");
      __sb.Append(ChildCount);
    }
    if (__isset.nodeSourceId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NodeSourceId: ");
      __sb.Append(NodeSourceId);
    }
    if (Parent != null && __isset.parent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Parent: ");
      __sb.Append(Parent);
    }
    if (ChildList != null && __isset.childList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChildList: ");
      __sb.Append(ChildList);
    }
    if (Rect != null && __isset.rect) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rect: ");
      __sb.Append(Rect);
    }
    if (__isset.depth) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Depth: ");
      __sb.Append(Depth);
    }
    if (__isset.depthToContent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DepthToContent: ");
      __sb.Append(DepthToContent);
    }
    if (__isset.contentIndex) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContentIndex: ");
      __sb.Append(ContentIndex);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

