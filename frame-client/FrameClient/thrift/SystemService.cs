/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SystemService {
  public interface ISync {
    bool RemoteControl(string packageName);
    bool StartApp(string packageName, string activityName);
    string ReadFile(string filePath);
    bool WriteFile(string filePath, string content, bool append);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_RemoteControl(AsyncCallback callback, object state, string packageName);
    bool End_RemoteControl(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_StartApp(AsyncCallback callback, object state, string packageName, string activityName);
    bool End_StartApp(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_ReadFile(AsyncCallback callback, object state, string filePath);
    string End_ReadFile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_WriteFile(AsyncCallback callback, object state, string filePath, string content, bool append);
    bool End_WriteFile(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_RemoteControl(AsyncCallback callback, object state, string packageName)
    {
      return send_RemoteControl(callback, state, packageName);
    }

    public bool End_RemoteControl(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_RemoteControl();
    }

    #endif

    public bool RemoteControl(string packageName)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_RemoteControl(null, null, packageName);
      return End_RemoteControl(asyncResult);

      #else
      send_RemoteControl(packageName);
      return recv_RemoteControl();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_RemoteControl(AsyncCallback callback, object state, string packageName)
    {
      oprot_.WriteMessageBegin(new TMessage("RemoteControl", TMessageType.Call, seqid_));
      RemoteControl_args args = new RemoteControl_args();
      args.PackageName = packageName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_RemoteControl(string packageName)
    {
      oprot_.WriteMessageBegin(new TMessage("RemoteControl", TMessageType.Call, seqid_));
      RemoteControl_args args = new RemoteControl_args();
      args.PackageName = packageName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_RemoteControl()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      RemoteControl_result result = new RemoteControl_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoteControl failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_StartApp(AsyncCallback callback, object state, string packageName, string activityName)
    {
      return send_StartApp(callback, state, packageName, activityName);
    }

    public bool End_StartApp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_StartApp();
    }

    #endif

    public bool StartApp(string packageName, string activityName)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_StartApp(null, null, packageName, activityName);
      return End_StartApp(asyncResult);

      #else
      send_StartApp(packageName, activityName);
      return recv_StartApp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_StartApp(AsyncCallback callback, object state, string packageName, string activityName)
    {
      oprot_.WriteMessageBegin(new TMessage("StartApp", TMessageType.Call, seqid_));
      StartApp_args args = new StartApp_args();
      args.PackageName = packageName;
      args.ActivityName = activityName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_StartApp(string packageName, string activityName)
    {
      oprot_.WriteMessageBegin(new TMessage("StartApp", TMessageType.Call, seqid_));
      StartApp_args args = new StartApp_args();
      args.PackageName = packageName;
      args.ActivityName = activityName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_StartApp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      StartApp_result result = new StartApp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StartApp failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_ReadFile(AsyncCallback callback, object state, string filePath)
    {
      return send_ReadFile(callback, state, filePath);
    }

    public string End_ReadFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ReadFile();
    }

    #endif

    public string ReadFile(string filePath)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_ReadFile(null, null, filePath);
      return End_ReadFile(asyncResult);

      #else
      send_ReadFile(filePath);
      return recv_ReadFile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ReadFile(AsyncCallback callback, object state, string filePath)
    {
      oprot_.WriteMessageBegin(new TMessage("ReadFile", TMessageType.Call, seqid_));
      ReadFile_args args = new ReadFile_args();
      args.FilePath = filePath;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_ReadFile(string filePath)
    {
      oprot_.WriteMessageBegin(new TMessage("ReadFile", TMessageType.Call, seqid_));
      ReadFile_args args = new ReadFile_args();
      args.FilePath = filePath;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_ReadFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ReadFile_result result = new ReadFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReadFile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_WriteFile(AsyncCallback callback, object state, string filePath, string content, bool append)
    {
      return send_WriteFile(callback, state, filePath, content, append);
    }

    public bool End_WriteFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_WriteFile();
    }

    #endif

    public bool WriteFile(string filePath, string content, bool append)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_WriteFile(null, null, filePath, content, append);
      return End_WriteFile(asyncResult);

      #else
      send_WriteFile(filePath, content, append);
      return recv_WriteFile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_WriteFile(AsyncCallback callback, object state, string filePath, string content, bool append)
    {
      oprot_.WriteMessageBegin(new TMessage("WriteFile", TMessageType.Call, seqid_));
      WriteFile_args args = new WriteFile_args();
      args.FilePath = filePath;
      args.Content = content;
      args.Append = append;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_WriteFile(string filePath, string content, bool append)
    {
      oprot_.WriteMessageBegin(new TMessage("WriteFile", TMessageType.Call, seqid_));
      WriteFile_args args = new WriteFile_args();
      args.FilePath = filePath;
      args.Content = content;
      args.Append = append;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_WriteFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      WriteFile_result result = new WriteFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WriteFile failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["RemoteControl"] = RemoteControl_Process;
      processMap_["StartApp"] = StartApp_Process;
      processMap_["ReadFile"] = ReadFile_Process;
      processMap_["WriteFile"] = WriteFile_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void RemoteControl_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      RemoteControl_args args = new RemoteControl_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      RemoteControl_result result = new RemoteControl_result();
      try
      {
        result.Success = iface_.RemoteControl(args.PackageName);
        oprot.WriteMessageBegin(new TMessage("RemoteControl", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("RemoteControl", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void StartApp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      StartApp_args args = new StartApp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      StartApp_result result = new StartApp_result();
      try
      {
        result.Success = iface_.StartApp(args.PackageName, args.ActivityName);
        oprot.WriteMessageBegin(new TMessage("StartApp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("StartApp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ReadFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ReadFile_args args = new ReadFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ReadFile_result result = new ReadFile_result();
      try
      {
        result.Success = iface_.ReadFile(args.FilePath);
        oprot.WriteMessageBegin(new TMessage("ReadFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex) 
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ReadFile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void WriteFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      WriteFile_args args = new WriteFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      WriteFile_result result = new WriteFile_result();
      try
      {
        result.Success = iface_.WriteFile(args.FilePath, args.Content, args.Append);
        oprot.WriteMessageBegin(new TMessage("WriteFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("WriteFile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RemoteControl_args : TBase
  {
    private string _packageName;

    public string PackageName
    {
      get
      {
        return _packageName;
      }
      set
      {
        __isset.packageName = true;
        this._packageName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool packageName;
    }

    public RemoteControl_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PackageName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RemoteControl_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PackageName != null && __isset.packageName) {
          field.Name = "packageName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PackageName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RemoteControl_args(");
      bool __first = true;
      if (PackageName != null && __isset.packageName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PackageName: ");
        __sb.Append(PackageName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RemoteControl_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public RemoteControl_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RemoteControl_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RemoteControl_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StartApp_args : TBase
  {
    private string _packageName;
    private string _activityName;

    public string PackageName
    {
      get
      {
        return _packageName;
      }
      set
      {
        __isset.packageName = true;
        this._packageName = value;
      }
    }

    public string ActivityName
    {
      get
      {
        return _activityName;
      }
      set
      {
        __isset.activityName = true;
        this._activityName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool packageName;
      public bool activityName;
    }

    public StartApp_args() {
      this._activityName = "";
      this.__isset.activityName = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PackageName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ActivityName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("StartApp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PackageName != null && __isset.packageName) {
          field.Name = "packageName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PackageName);
          oprot.WriteFieldEnd();
        }
        if (ActivityName != null && __isset.activityName) {
          field.Name = "activityName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActivityName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("StartApp_args(");
      bool __first = true;
      if (PackageName != null && __isset.packageName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PackageName: ");
        __sb.Append(PackageName);
      }
      if (ActivityName != null && __isset.activityName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivityName: ");
        __sb.Append(ActivityName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StartApp_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public StartApp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("StartApp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("StartApp_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReadFile_args : TBase
  {
    private string _filePath;

    public string FilePath
    {
      get
      {
        return _filePath;
      }
      set
      {
        __isset.filePath = true;
        this._filePath = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool filePath;
    }

    public ReadFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FilePath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ReadFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FilePath != null && __isset.filePath) {
          field.Name = "filePath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FilePath);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ReadFile_args(");
      bool __first = true;
      if (FilePath != null && __isset.filePath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FilePath: ");
        __sb.Append(FilePath);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReadFile_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ReadFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ReadFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ReadFile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WriteFile_args : TBase
  {
    private string _filePath;
    private string _content;
    private bool _append;

    public string FilePath
    {
      get
      {
        return _filePath;
      }
      set
      {
        __isset.filePath = true;
        this._filePath = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public bool Append
    {
      get
      {
        return _append;
      }
      set
      {
        __isset.append = true;
        this._append = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool filePath;
      public bool content;
      public bool append;
    }

    public WriteFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FilePath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Content = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Append = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("WriteFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FilePath != null && __isset.filePath) {
          field.Name = "filePath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FilePath);
          oprot.WriteFieldEnd();
        }
        if (Content != null && __isset.content) {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Content);
          oprot.WriteFieldEnd();
        }
        if (__isset.append) {
          field.Name = "append";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Append);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("WriteFile_args(");
      bool __first = true;
      if (FilePath != null && __isset.filePath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FilePath: ");
        __sb.Append(FilePath);
      }
      if (Content != null && __isset.content) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Content: ");
        __sb.Append(Content);
      }
      if (__isset.append) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Append: ");
        __sb.Append(Append);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WriteFile_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public WriteFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("WriteFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("WriteFile_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
