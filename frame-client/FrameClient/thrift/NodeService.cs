/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class NodeService {
  public interface ISync {
    ScrapResponse Scrap(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    ScrapResponse ScrapSimilar(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    SelectResponse NodeAction(NodeInfo nodeInfo, SelectConfig config, int expireSeconds);
    SelectResponse SelectorAction(ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds);
    SelectResponse GestureAction(ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds);
    PositionResponse ScrapPosition(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    bool PositionAction(PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds);
    bool GlobalAction(GlobalEventType eventType, int expireSeconds);
    bool ScrapCallback(ScrapResponse selector);
    bool RectCallback(List<Rect> rects);
    bool PositionCallback(PositionResponse position);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_Scrap(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    ScrapResponse End_Scrap(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_ScrapSimilar(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    ScrapResponse End_ScrapSimilar(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_NodeAction(AsyncCallback callback, object state, NodeInfo nodeInfo, SelectConfig config, int expireSeconds);
    SelectResponse End_NodeAction(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_SelectorAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds);
    SelectResponse End_SelectorAction(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_GestureAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds);
    SelectResponse End_GestureAction(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_ScrapPosition(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds);
    PositionResponse End_ScrapPosition(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_PositionAction(AsyncCallback callback, object state, PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds);
    bool End_PositionAction(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_GlobalAction(AsyncCallback callback, object state, GlobalEventType eventType, int expireSeconds);
    bool End_GlobalAction(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_ScrapCallback(AsyncCallback callback, object state, ScrapResponse selector);
    bool End_ScrapCallback(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_RectCallback(AsyncCallback callback, object state, List<Rect> rects);
    bool End_RectCallback(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_PositionCallback(AsyncCallback callback, object state, PositionResponse position);
    bool End_PositionCallback(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_Scrap(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      return send_Scrap(callback, state, config, anchorNodeInfo, expireSeconds);
    }

    public ScrapResponse End_Scrap(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Scrap();
    }

    #endif

    public ScrapResponse Scrap(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_Scrap(null, null, config, anchorNodeInfo, expireSeconds);
      return End_Scrap(asyncResult);

      #else
      send_Scrap(config, anchorNodeInfo, expireSeconds);
      return recv_Scrap();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Scrap(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("Scrap", TMessageType.Call, seqid_));
      Scrap_args args = new Scrap_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_Scrap(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("Scrap", TMessageType.Call, seqid_));
      Scrap_args args = new Scrap_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ScrapResponse recv_Scrap()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Scrap_result result = new Scrap_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Scrap failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_ScrapSimilar(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      return send_ScrapSimilar(callback, state, config, anchorNodeInfo, expireSeconds);
    }

    public ScrapResponse End_ScrapSimilar(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ScrapSimilar();
    }

    #endif

    public ScrapResponse ScrapSimilar(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_ScrapSimilar(null, null, config, anchorNodeInfo, expireSeconds);
      return End_ScrapSimilar(asyncResult);

      #else
      send_ScrapSimilar(config, anchorNodeInfo, expireSeconds);
      return recv_ScrapSimilar();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ScrapSimilar(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapSimilar", TMessageType.Call, seqid_));
      ScrapSimilar_args args = new ScrapSimilar_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_ScrapSimilar(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapSimilar", TMessageType.Call, seqid_));
      ScrapSimilar_args args = new ScrapSimilar_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ScrapResponse recv_ScrapSimilar()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ScrapSimilar_result result = new ScrapSimilar_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ScrapSimilar failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_NodeAction(AsyncCallback callback, object state, NodeInfo nodeInfo, SelectConfig config, int expireSeconds)
    {
      return send_NodeAction(callback, state, nodeInfo, config, expireSeconds);
    }

    public SelectResponse End_NodeAction(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_NodeAction();
    }

    #endif

    public SelectResponse NodeAction(NodeInfo nodeInfo, SelectConfig config, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_NodeAction(null, null, nodeInfo, config, expireSeconds);
      return End_NodeAction(asyncResult);

      #else
      send_NodeAction(nodeInfo, config, expireSeconds);
      return recv_NodeAction();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_NodeAction(AsyncCallback callback, object state, NodeInfo nodeInfo, SelectConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("NodeAction", TMessageType.Call, seqid_));
      NodeAction_args args = new NodeAction_args();
      args.NodeInfo = nodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_NodeAction(NodeInfo nodeInfo, SelectConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("NodeAction", TMessageType.Call, seqid_));
      NodeAction_args args = new NodeAction_args();
      args.NodeInfo = nodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SelectResponse recv_NodeAction()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      NodeAction_result result = new NodeAction_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "NodeAction failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_SelectorAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds)
    {
      return send_SelectorAction(callback, state, selector, anchorNodeInfo, config, expireSeconds);
    }

    public SelectResponse End_SelectorAction(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SelectorAction();
    }

    #endif

    public SelectResponse SelectorAction(ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_SelectorAction(null, null, selector, anchorNodeInfo, config, expireSeconds);
      return End_SelectorAction(asyncResult);

      #else
      send_SelectorAction(selector, anchorNodeInfo, config, expireSeconds);
      return recv_SelectorAction();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SelectorAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("SelectorAction", TMessageType.Call, seqid_));
      SelectorAction_args args = new SelectorAction_args();
      args.Selector = selector;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_SelectorAction(ScrapResponse selector, NodeInfo anchorNodeInfo, SelectConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("SelectorAction", TMessageType.Call, seqid_));
      SelectorAction_args args = new SelectorAction_args();
      args.Selector = selector;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SelectResponse recv_SelectorAction()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SelectorAction_result result = new SelectorAction_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SelectorAction failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_GestureAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds)
    {
      return send_GestureAction(callback, state, selector, anchorNodeInfo, config, expireSeconds);
    }

    public SelectResponse End_GestureAction(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GestureAction();
    }

    #endif

    public SelectResponse GestureAction(ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_GestureAction(null, null, selector, anchorNodeInfo, config, expireSeconds);
      return End_GestureAction(asyncResult);

      #else
      send_GestureAction(selector, anchorNodeInfo, config, expireSeconds);
      return recv_GestureAction();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GestureAction(AsyncCallback callback, object state, ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("GestureAction", TMessageType.Call, seqid_));
      GestureAction_args args = new GestureAction_args();
      args.Selector = selector;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_GestureAction(ScrapResponse selector, NodeInfo anchorNodeInfo, GestureConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("GestureAction", TMessageType.Call, seqid_));
      GestureAction_args args = new GestureAction_args();
      args.Selector = selector;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SelectResponse recv_GestureAction()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GestureAction_result result = new GestureAction_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GestureAction failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_ScrapPosition(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      return send_ScrapPosition(callback, state, config, anchorNodeInfo, expireSeconds);
    }

    public PositionResponse End_ScrapPosition(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ScrapPosition();
    }

    #endif

    public PositionResponse ScrapPosition(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_ScrapPosition(null, null, config, anchorNodeInfo, expireSeconds);
      return End_ScrapPosition(asyncResult);

      #else
      send_ScrapPosition(config, anchorNodeInfo, expireSeconds);
      return recv_ScrapPosition();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ScrapPosition(AsyncCallback callback, object state, ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapPosition", TMessageType.Call, seqid_));
      ScrapPosition_args args = new ScrapPosition_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_ScrapPosition(ScrapConfig config, NodeInfo anchorNodeInfo, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapPosition", TMessageType.Call, seqid_));
      ScrapPosition_args args = new ScrapPosition_args();
      args.Config = config;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PositionResponse recv_ScrapPosition()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ScrapPosition_result result = new ScrapPosition_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ScrapPosition failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_PositionAction(AsyncCallback callback, object state, PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds)
    {
      return send_PositionAction(callback, state, response, anchorNodeInfo, config, expireSeconds);
    }

    public bool End_PositionAction(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_PositionAction();
    }

    #endif

    public bool PositionAction(PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_PositionAction(null, null, response, anchorNodeInfo, config, expireSeconds);
      return End_PositionAction(asyncResult);

      #else
      send_PositionAction(response, anchorNodeInfo, config, expireSeconds);
      return recv_PositionAction();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_PositionAction(AsyncCallback callback, object state, PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("PositionAction", TMessageType.Call, seqid_));
      PositionAction_args args = new PositionAction_args();
      args.Response = response;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_PositionAction(PositionResponse response, NodeInfo anchorNodeInfo, PositionConfig config, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("PositionAction", TMessageType.Call, seqid_));
      PositionAction_args args = new PositionAction_args();
      args.Response = response;
      args.AnchorNodeInfo = anchorNodeInfo;
      args.Config = config;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_PositionAction()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      PositionAction_result result = new PositionAction_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PositionAction failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_GlobalAction(AsyncCallback callback, object state, GlobalEventType eventType, int expireSeconds)
    {
      return send_GlobalAction(callback, state, eventType, expireSeconds);
    }

    public bool End_GlobalAction(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GlobalAction();
    }

    #endif

    public bool GlobalAction(GlobalEventType eventType, int expireSeconds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_GlobalAction(null, null, eventType, expireSeconds);
      return End_GlobalAction(asyncResult);

      #else
      send_GlobalAction(eventType, expireSeconds);
      return recv_GlobalAction();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GlobalAction(AsyncCallback callback, object state, GlobalEventType eventType, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("GlobalAction", TMessageType.Call, seqid_));
      GlobalAction_args args = new GlobalAction_args();
      args.EventType = eventType;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_GlobalAction(GlobalEventType eventType, int expireSeconds)
    {
      oprot_.WriteMessageBegin(new TMessage("GlobalAction", TMessageType.Call, seqid_));
      GlobalAction_args args = new GlobalAction_args();
      args.EventType = eventType;
      args.ExpireSeconds = expireSeconds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_GlobalAction()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GlobalAction_result result = new GlobalAction_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalAction failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_ScrapCallback(AsyncCallback callback, object state, ScrapResponse selector)
    {
      return send_ScrapCallback(callback, state, selector);
    }

    public bool End_ScrapCallback(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ScrapCallback();
    }

    #endif

    public bool ScrapCallback(ScrapResponse selector)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_ScrapCallback(null, null, selector);
      return End_ScrapCallback(asyncResult);

      #else
      send_ScrapCallback(selector);
      return recv_ScrapCallback();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ScrapCallback(AsyncCallback callback, object state, ScrapResponse selector)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapCallback", TMessageType.Call, seqid_));
      ScrapCallback_args args = new ScrapCallback_args();
      args.Selector = selector;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_ScrapCallback(ScrapResponse selector)
    {
      oprot_.WriteMessageBegin(new TMessage("ScrapCallback", TMessageType.Call, seqid_));
      ScrapCallback_args args = new ScrapCallback_args();
      args.Selector = selector;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_ScrapCallback()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ScrapCallback_result result = new ScrapCallback_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ScrapCallback failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_RectCallback(AsyncCallback callback, object state, List<Rect> rects)
    {
      return send_RectCallback(callback, state, rects);
    }

    public bool End_RectCallback(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_RectCallback();
    }

    #endif

    public bool RectCallback(List<Rect> rects)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_RectCallback(null, null, rects);
      return End_RectCallback(asyncResult);

      #else
      send_RectCallback(rects);
      return recv_RectCallback();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_RectCallback(AsyncCallback callback, object state, List<Rect> rects)
    {
      oprot_.WriteMessageBegin(new TMessage("RectCallback", TMessageType.Call, seqid_));
      RectCallback_args args = new RectCallback_args();
      args.Rects = rects;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_RectCallback(List<Rect> rects)
    {
      oprot_.WriteMessageBegin(new TMessage("RectCallback", TMessageType.Call, seqid_));
      RectCallback_args args = new RectCallback_args();
      args.Rects = rects;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_RectCallback()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      RectCallback_result result = new RectCallback_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RectCallback failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_PositionCallback(AsyncCallback callback, object state, PositionResponse position)
    {
      return send_PositionCallback(callback, state, position);
    }

    public bool End_PositionCallback(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_PositionCallback();
    }

    #endif

    public bool PositionCallback(PositionResponse position)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_PositionCallback(null, null, position);
      return End_PositionCallback(asyncResult);

      #else
      send_PositionCallback(position);
      return recv_PositionCallback();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_PositionCallback(AsyncCallback callback, object state, PositionResponse position)
    {
      oprot_.WriteMessageBegin(new TMessage("PositionCallback", TMessageType.Call, seqid_));
      PositionCallback_args args = new PositionCallback_args();
      args.Position = position;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_PositionCallback(PositionResponse position)
    {
      oprot_.WriteMessageBegin(new TMessage("PositionCallback", TMessageType.Call, seqid_));
      PositionCallback_args args = new PositionCallback_args();
      args.Position = position;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_PositionCallback()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      PositionCallback_result result = new PositionCallback_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PositionCallback failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["Scrap"] = Scrap_Process;
      processMap_["ScrapSimilar"] = ScrapSimilar_Process;
      processMap_["NodeAction"] = NodeAction_Process;
      processMap_["SelectorAction"] = SelectorAction_Process;
      processMap_["GestureAction"] = GestureAction_Process;
      processMap_["ScrapPosition"] = ScrapPosition_Process;
      processMap_["PositionAction"] = PositionAction_Process;
      processMap_["GlobalAction"] = GlobalAction_Process;
      processMap_["ScrapCallback"] = ScrapCallback_Process;
      processMap_["RectCallback"] = RectCallback_Process;
      processMap_["PositionCallback"] = PositionCallback_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void Scrap_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Scrap_args args = new Scrap_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Scrap_result result = new Scrap_result();
      try
      {
        result.Success = iface_.Scrap(args.Config, args.AnchorNodeInfo, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("Scrap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("Scrap", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ScrapSimilar_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ScrapSimilar_args args = new ScrapSimilar_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ScrapSimilar_result result = new ScrapSimilar_result();
      try
      {
        result.Success = iface_.ScrapSimilar(args.Config, args.AnchorNodeInfo, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("ScrapSimilar", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ScrapSimilar", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void NodeAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      NodeAction_args args = new NodeAction_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      NodeAction_result result = new NodeAction_result();
      try
      {
        result.Success = iface_.NodeAction(args.NodeInfo, args.Config, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("NodeAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("NodeAction", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SelectorAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SelectorAction_args args = new SelectorAction_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SelectorAction_result result = new SelectorAction_result();
      try
      {
        result.Success = iface_.SelectorAction(args.Selector, args.AnchorNodeInfo, args.Config, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("SelectorAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("SelectorAction", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GestureAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GestureAction_args args = new GestureAction_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GestureAction_result result = new GestureAction_result();
      try
      {
        result.Success = iface_.GestureAction(args.Selector, args.AnchorNodeInfo, args.Config, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("GestureAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("GestureAction", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ScrapPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ScrapPosition_args args = new ScrapPosition_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ScrapPosition_result result = new ScrapPosition_result();
      try
      {
        result.Success = iface_.ScrapPosition(args.Config, args.AnchorNodeInfo, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("ScrapPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ScrapPosition", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void PositionAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      PositionAction_args args = new PositionAction_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      PositionAction_result result = new PositionAction_result();
      try
      {
        result.Success = iface_.PositionAction(args.Response, args.AnchorNodeInfo, args.Config, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("PositionAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("PositionAction", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GlobalAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GlobalAction_args args = new GlobalAction_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GlobalAction_result result = new GlobalAction_result();
      try
      {
        result.Success = iface_.GlobalAction(args.EventType, args.ExpireSeconds);
        oprot.WriteMessageBegin(new TMessage("GlobalAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("GlobalAction", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ScrapCallback_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ScrapCallback_args args = new ScrapCallback_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ScrapCallback_result result = new ScrapCallback_result();
      try
      {
        result.Success = iface_.ScrapCallback(args.Selector);
        oprot.WriteMessageBegin(new TMessage("ScrapCallback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ScrapCallback", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void RectCallback_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      RectCallback_args args = new RectCallback_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      RectCallback_result result = new RectCallback_result();
      try
      {
        result.Success = iface_.RectCallback(args.Rects);
        oprot.WriteMessageBegin(new TMessage("RectCallback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("RectCallback", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void PositionCallback_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      PositionCallback_args args = new PositionCallback_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      PositionCallback_result result = new PositionCallback_result();
      try
      {
        result.Success = iface_.PositionCallback(args.Position);
        oprot.WriteMessageBegin(new TMessage("PositionCallback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("PositionCallback", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Scrap_args : TBase
  {
    private ScrapConfig _config;
    private NodeInfo _anchorNodeInfo;
    private int _expireSeconds;

    public ScrapConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool config;
      public bool anchorNodeInfo;
      public bool expireSeconds;
    }

    public Scrap_args() {
      this._config = new ScrapConfig();
      this.__isset.config = true;
      this._expireSeconds = 60;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Config = new ScrapConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Scrap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Scrap_args(");
      bool __first = true;
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Scrap_result : TBase
  {
    private ScrapResponse _success;

    public ScrapResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Scrap_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ScrapResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Scrap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Scrap_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapSimilar_args : TBase
  {
    private ScrapConfig _config;
    private NodeInfo _anchorNodeInfo;
    private int _expireSeconds;

    public ScrapConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool config;
      public bool anchorNodeInfo;
      public bool expireSeconds;
    }

    public ScrapSimilar_args() {
      this._config = new ScrapConfig();
      this.__isset.config = true;
      this._expireSeconds = 60;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Config = new ScrapConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapSimilar_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapSimilar_args(");
      bool __first = true;
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapSimilar_result : TBase
  {
    private ScrapResponse _success;

    public ScrapResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ScrapSimilar_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ScrapResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapSimilar_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapSimilar_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NodeAction_args : TBase
  {
    private NodeInfo _nodeInfo;
    private SelectConfig _config;
    private int _expireSeconds;

    public NodeInfo NodeInfo
    {
      get
      {
        return _nodeInfo;
      }
      set
      {
        __isset.nodeInfo = true;
        this._nodeInfo = value;
      }
    }

    public SelectConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool nodeInfo;
      public bool config;
      public bool expireSeconds;
    }

    public NodeAction_args() {
      this._config = new SelectConfig();
      this.__isset.config = true;
      this._expireSeconds = 3;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                NodeInfo = new NodeInfo();
                NodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Config = new SelectConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NodeAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NodeInfo != null && __isset.nodeInfo) {
          field.Name = "nodeInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          NodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NodeAction_args(");
      bool __first = true;
      if (NodeInfo != null && __isset.nodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NodeInfo: ");
        __sb.Append(NodeInfo== null ? "<null>" : NodeInfo.ToString());
      }
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NodeAction_result : TBase
  {
    private SelectResponse _success;

    public SelectResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public NodeAction_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SelectResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NodeAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NodeAction_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SelectorAction_args : TBase
  {
    private ScrapResponse _selector;
    private NodeInfo _anchorNodeInfo;
    private SelectConfig _config;
    private int _expireSeconds;

    public ScrapResponse Selector
    {
      get
      {
        return _selector;
      }
      set
      {
        __isset.selector = true;
        this._selector = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public SelectConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool selector;
      public bool anchorNodeInfo;
      public bool config;
      public bool expireSeconds;
    }

    public SelectorAction_args() {
      this._config = new SelectConfig();
      this.__isset.config = true;
      this._expireSeconds = 3;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Selector = new ScrapResponse();
                Selector.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Config = new SelectConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SelectorAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Selector != null && __isset.selector) {
          field.Name = "selector";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Selector.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SelectorAction_args(");
      bool __first = true;
      if (Selector != null && __isset.selector) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Selector: ");
        __sb.Append(Selector== null ? "<null>" : Selector.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SelectorAction_result : TBase
  {
    private SelectResponse _success;

    public SelectResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SelectorAction_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SelectResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SelectorAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SelectorAction_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GestureAction_args : TBase
  {
    private ScrapResponse _selector;
    private NodeInfo _anchorNodeInfo;
    private GestureConfig _config;
    private int _expireSeconds;

    public ScrapResponse Selector
    {
      get
      {
        return _selector;
      }
      set
      {
        __isset.selector = true;
        this._selector = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public GestureConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool selector;
      public bool anchorNodeInfo;
      public bool config;
      public bool expireSeconds;
    }

    public GestureAction_args() {
      this._config = new GestureConfig();
      this.__isset.config = true;
      this._expireSeconds = 3;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Selector = new ScrapResponse();
                Selector.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Config = new GestureConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GestureAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Selector != null && __isset.selector) {
          field.Name = "selector";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Selector.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GestureAction_args(");
      bool __first = true;
      if (Selector != null && __isset.selector) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Selector: ");
        __sb.Append(Selector== null ? "<null>" : Selector.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GestureAction_result : TBase
  {
    private SelectResponse _success;

    public SelectResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GestureAction_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SelectResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GestureAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GestureAction_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapPosition_args : TBase
  {
    private ScrapConfig _config;
    private NodeInfo _anchorNodeInfo;
    private int _expireSeconds;

    public ScrapConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool config;
      public bool anchorNodeInfo;
      public bool expireSeconds;
    }

    public ScrapPosition_args() {
      this._config = new ScrapConfig();
      this.__isset.config = true;
      this._expireSeconds = 60;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Config = new ScrapConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapPosition_args(");
      bool __first = true;
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapPosition_result : TBase
  {
    private PositionResponse _success;

    public PositionResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ScrapPosition_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapPosition_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionAction_args : TBase
  {
    private PositionResponse _response;
    private NodeInfo _anchorNodeInfo;
    private PositionConfig _config;
    private int _expireSeconds;

    public PositionResponse Response
    {
      get
      {
        return _response;
      }
      set
      {
        __isset.response = true;
        this._response = value;
      }
    }

    public NodeInfo AnchorNodeInfo
    {
      get
      {
        return _anchorNodeInfo;
      }
      set
      {
        __isset.anchorNodeInfo = true;
        this._anchorNodeInfo = value;
      }
    }

    public PositionConfig Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool response;
      public bool anchorNodeInfo;
      public bool config;
      public bool expireSeconds;
    }

    public PositionAction_args() {
      this._config = new PositionConfig();
      this.__isset.config = true;
      this._expireSeconds = 3;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Response = new PositionResponse();
                Response.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AnchorNodeInfo = new NodeInfo();
                AnchorNodeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Config = new PositionConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PositionAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Response != null && __isset.response) {
          field.Name = "response";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Response.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
          field.Name = "anchorNodeInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AnchorNodeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PositionAction_args(");
      bool __first = true;
      if (Response != null && __isset.response) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Response: ");
        __sb.Append(Response== null ? "<null>" : Response.ToString());
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnchorNodeInfo: ");
        __sb.Append(AnchorNodeInfo== null ? "<null>" : AnchorNodeInfo.ToString());
      }
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config== null ? "<null>" : Config.ToString());
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionAction_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public PositionAction_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PositionAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PositionAction_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GlobalAction_args : TBase
  {
    private GlobalEventType _eventType;
    private int _expireSeconds;

    /// <summary>
    /// 
    /// <seealso cref=".GlobalEventType"/>
    /// </summary>
    public GlobalEventType EventType
    {
      get
      {
        return _eventType;
      }
      set
      {
        __isset.eventType = true;
        this._eventType = value;
      }
    }

    public int ExpireSeconds
    {
      get
      {
        return _expireSeconds;
      }
      set
      {
        __isset.expireSeconds = true;
        this._expireSeconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool eventType;
      public bool expireSeconds;
    }

    public GlobalAction_args() {
      this._expireSeconds = 3;
      this.__isset.expireSeconds = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                EventType = (GlobalEventType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ExpireSeconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GlobalAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.eventType) {
          field.Name = "eventType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)EventType);
          oprot.WriteFieldEnd();
        }
        if (__isset.expireSeconds) {
          field.Name = "expireSeconds";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpireSeconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GlobalAction_args(");
      bool __first = true;
      if (__isset.eventType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventType: ");
        __sb.Append(EventType);
      }
      if (__isset.expireSeconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpireSeconds: ");
        __sb.Append(ExpireSeconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GlobalAction_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GlobalAction_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GlobalAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GlobalAction_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapCallback_args : TBase
  {
    private ScrapResponse _selector;

    public ScrapResponse Selector
    {
      get
      {
        return _selector;
      }
      set
      {
        __isset.selector = true;
        this._selector = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool selector;
    }

    public ScrapCallback_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Selector = new ScrapResponse();
                Selector.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapCallback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Selector != null && __isset.selector) {
          field.Name = "selector";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Selector.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapCallback_args(");
      bool __first = true;
      if (Selector != null && __isset.selector) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Selector: ");
        __sb.Append(Selector== null ? "<null>" : Selector.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScrapCallback_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ScrapCallback_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScrapCallback_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScrapCallback_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RectCallback_args : TBase
  {
    private List<Rect> _rects;

    public List<Rect> Rects
    {
      get
      {
        return _rects;
      }
      set
      {
        __isset.rects = true;
        this._rects = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rects;
    }

    public RectCallback_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Rects = new List<Rect>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Rect _elem2;
                    _elem2 = new Rect();
                    _elem2.Read(iprot);
                    Rects.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RectCallback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Rects != null && __isset.rects) {
          field.Name = "rects";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Rects.Count));
            foreach (Rect _iter3 in Rects)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RectCallback_args(");
      bool __first = true;
      if (Rects != null && __isset.rects) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rects: ");
        __sb.Append(Rects);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RectCallback_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public RectCallback_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RectCallback_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RectCallback_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionCallback_args : TBase
  {
    private PositionResponse _position;

    public PositionResponse Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool position;
    }

    public PositionCallback_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Position = new PositionResponse();
                Position.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PositionCallback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Position != null && __isset.position) {
          field.Name = "position";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Position.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PositionCallback_args(");
      bool __first = true;
      if (Position != null && __isset.position) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Position: ");
        __sb.Append(Position== null ? "<null>" : Position.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionCallback_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public PositionCallback_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PositionCallback_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PositionCallback_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
