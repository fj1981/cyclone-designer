/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PositionConfig : TBase
{
  private PointEventType _eventType;
  private bool _highlight;
  private string _highlightColor;
  private double _alpha;
  private int _maxSelectNumber;
  private string _extraJson;

  /// <summary>
  /// 
  /// <seealso cref="PointEventType"/>
  /// </summary>
  public PointEventType EventType
  {
    get
    {
      return _eventType;
    }
    set
    {
      __isset.eventType = true;
      this._eventType = value;
    }
  }

  public bool Highlight
  {
    get
    {
      return _highlight;
    }
    set
    {
      __isset.highlight = true;
      this._highlight = value;
    }
  }

  public string HighlightColor
  {
    get
    {
      return _highlightColor;
    }
    set
    {
      __isset.highlightColor = true;
      this._highlightColor = value;
    }
  }

  public double Alpha
  {
    get
    {
      return _alpha;
    }
    set
    {
      __isset.alpha = true;
      this._alpha = value;
    }
  }

  public int MaxSelectNumber
  {
    get
    {
      return _maxSelectNumber;
    }
    set
    {
      __isset.maxSelectNumber = true;
      this._maxSelectNumber = value;
    }
  }

  public string ExtraJson
  {
    get
    {
      return _extraJson;
    }
    set
    {
      __isset.extraJson = true;
      this._extraJson = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool eventType;
    public bool highlight;
    public bool highlightColor;
    public bool alpha;
    public bool maxSelectNumber;
    public bool extraJson;
  }

  public PositionConfig() {
    this._eventType = PointEventType.NONE;
    this.__isset.eventType = true;
    this._highlight = true;
    this.__isset.highlight = true;
    this._highlightColor = "#5fe2a9";
    this.__isset.highlightColor = true;
    this._alpha = 0.6;
    this.__isset.alpha = true;
    this._maxSelectNumber = -1;
    this.__isset.maxSelectNumber = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              EventType = (PointEventType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Highlight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              HighlightColor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Alpha = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MaxSelectNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ExtraJson = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PositionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.eventType) {
        field.Name = "eventType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)EventType);
        oprot.WriteFieldEnd();
      }
      if (__isset.highlight) {
        field.Name = "highlight";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Highlight);
        oprot.WriteFieldEnd();
      }
      if (HighlightColor != null && __isset.highlightColor) {
        field.Name = "highlightColor";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HighlightColor);
        oprot.WriteFieldEnd();
      }
      if (__isset.alpha) {
        field.Name = "alpha";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Alpha);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxSelectNumber) {
        field.Name = "maxSelectNumber";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxSelectNumber);
        oprot.WriteFieldEnd();
      }
      if (ExtraJson != null && __isset.extraJson) {
        field.Name = "extraJson";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtraJson);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PositionConfig(");
    bool __first = true;
    if (__isset.eventType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EventType: ");
      __sb.Append(EventType);
    }
    if (__isset.highlight) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Highlight: ");
      __sb.Append(Highlight);
    }
    if (HighlightColor != null && __isset.highlightColor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HighlightColor: ");
      __sb.Append(HighlightColor);
    }
    if (__isset.alpha) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Alpha: ");
      __sb.Append(Alpha);
    }
    if (__isset.maxSelectNumber) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MaxSelectNumber: ");
      __sb.Append(MaxSelectNumber);
    }
    if (ExtraJson != null && __isset.extraJson) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraJson: ");
      __sb.Append(ExtraJson);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

