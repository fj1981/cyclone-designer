/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Selector : TBase
{
  private List<SingleSelector> _singleSelectorPath;
  private string _packageName;
  private NodeInfo _anchorNodeInfo;

  public List<SingleSelector> SingleSelectorPath
  {
    get
    {
      return _singleSelectorPath;
    }
    set
    {
      __isset.singleSelectorPath = true;
      this._singleSelectorPath = value;
    }
  }

  public string PackageName
  {
    get
    {
      return _packageName;
    }
    set
    {
      __isset.packageName = true;
      this._packageName = value;
    }
  }

  public NodeInfo AnchorNodeInfo
  {
    get
    {
      return _anchorNodeInfo;
    }
    set
    {
      __isset.anchorNodeInfo = true;
      this._anchorNodeInfo = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool singleSelectorPath;
    public bool packageName;
    public bool anchorNodeInfo;
  }

  public Selector() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SingleSelectorPath = new List<SingleSelector>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  SingleSelector _elem6;
                  _elem6 = new SingleSelector();
                  _elem6.Read(iprot);
                  SingleSelectorPath.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              PackageName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              AnchorNodeInfo = new NodeInfo();
              AnchorNodeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Selector");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SingleSelectorPath != null && __isset.singleSelectorPath) {
        field.Name = "singleSelectorPath";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SingleSelectorPath.Count));
          foreach (SingleSelector _iter7 in SingleSelectorPath)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PackageName != null && __isset.packageName) {
        field.Name = "packageName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PackageName);
        oprot.WriteFieldEnd();
      }
      if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
        field.Name = "anchorNodeInfo";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        AnchorNodeInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Selector(");
    bool __first = true;
    if (SingleSelectorPath != null && __isset.singleSelectorPath) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SingleSelectorPath: ");
      __sb.Append(SingleSelectorPath);
    }
    if (PackageName != null && __isset.packageName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PackageName: ");
      __sb.Append(PackageName);
    }
    if (AnchorNodeInfo != null && __isset.anchorNodeInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AnchorNodeInfo: ");
      __sb.Append(AnchorNodeInfo);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

